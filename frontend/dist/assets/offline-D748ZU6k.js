const b="rcc-db";const t={lectures:"lecturePackages",quiz:"pendingQuizSubmissions",discuss:"discussionOutbox",auth:"auth"};let n;function S(){return n||(n=new Promise((e,s)=>{const r=indexedDB.open(b,3);r.onupgradeneeded=()=>{const c=r.result;c.objectStoreNames.contains(t.lectures)||c.createObjectStore(t.lectures,{keyPath:"id"}),c.objectStoreNames.contains(t.quiz)||c.createObjectStore(t.quiz,{keyPath:"createdAt"}),c.objectStoreNames.contains(t.discuss)||c.createObjectStore(t.discuss,{keyPath:"createdAt"}),c.objectStoreNames.contains(t.auth)||c.createObjectStore(t.auth)},r.onsuccess=()=>e(r.result),r.onerror=()=>s(r.error)}),n)}async function a(e,s,r){const c=await S();return await new Promise((i,d)=>{const o=c.transaction(e,s),l=o.objectStore(e),u=r(l);o.oncomplete=()=>i(u&&u.result!==void 0?u.result:!0),o.onerror=()=>d(o.error)})}const g=e=>a(t.lectures,"readwrite",s=>s.put(e)),P=e=>a(t.lectures,"readonly",s=>s.get(e)),p=()=>a(t.lectures,"readonly",e=>e.getAll()),j=()=>a(t.lectures,"readwrite",e=>e.clear()),O=e=>a(t.quiz,"readwrite",s=>s.put(e)),f=e=>a(t.discuss,"readwrite",s=>s.put(e));export{g as a,f as b,j as c,P as g,p as l,O as s};
